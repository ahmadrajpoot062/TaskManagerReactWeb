{"ast":null,"code":"const BASE_URL = \"https://localhost:7253/api/User\"; // Replace with your API base URL\n\n// Utility function to handle errors and responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    // Log detailed error based on the response status and body\n    const errorText = await response.text();\n    throw new Error(`HTTP ${response.status}: ${errorText || 'Unknown error'}`);\n  }\n  return response.json();\n};\n\n// Create a new user\nexport const createUser = async user => {\n  try {\n    const response = await fetch(`${BASE_URL}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error in createUser:', error);\n    throw new Error(`Failed to create user: ${error.message}`);\n  }\n};\n\n// Get all users\nexport const getUsers = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}`);\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error in getUsers:', error);\n    throw new Error(`Failed to fetch users: ${error.message}`);\n  }\n};\n\n// Get a user by ID\nexport const getUserById = async id => {\n  try {\n    const response = await fetch(`${BASE_URL}/${id}`);\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(`Error in getUserById for user ID ${id}:`, error);\n    throw new Error(`Failed to fetch user with ID ${id}: ${error.message}`);\n  }\n};\n\n// Update a user by ID\nexport const updateUser = async (id, updatedUser) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedUser)\n    });\n\n    // Handle empty responses (204 No Content)\n    if (response.status === 204) return null;\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(`Error in updateUser for user ID ${id}:`, error);\n    throw new Error(`Failed to update user with ID ${id}: ${error.message}`);\n  }\n};\n\n// Delete a user by ID\nexport const deleteUser = async id => {\n  try {\n    const response = await fetch(`${BASE_URL}/${id}`, {\n      method: 'DELETE'\n    });\n    if (response.status === 204) {\n      return null; // No content to return\n    }\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(`Error in deleteUser for user ID ${id}:`, error);\n    throw new Error(`Failed to delete user with ID ${id}: ${error.message}`);\n  }\n};\n\n// Get a user by username\nexport const getUserByUsername = async username => {\n  try {\n    const response = await fetch(`${BASE_URL}/username/${username}`);\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(`Error in getUserByUsername for username ${username}:`, error);\n    throw new Error(`Failed to fetch user with username ${username}: ${error.message}`);\n  }\n};","map":{"version":3,"names":["BASE_URL","handleResponse","response","ok","errorText","text","Error","status","json","createUser","user","fetch","method","headers","body","JSON","stringify","error","console","message","getUsers","getUserById","id","updateUser","updatedUser","deleteUser","getUserByUsername","username"],"sources":["C:/Users/mmob3/Desktop/task-manager/src/Services/userapi.js"],"sourcesContent":["const BASE_URL = \"https://localhost:7253/api/User\"; // Replace with your API base URL\r\n\r\n// Utility function to handle errors and responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    // Log detailed error based on the response status and body\r\n    const errorText = await response.text();\r\n    throw new Error(`HTTP ${response.status}: ${errorText || 'Unknown error'}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Create a new user\r\nexport const createUser = async (user) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error in createUser:', error);\r\n    throw new Error(`Failed to create user: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Get all users\r\nexport const getUsers = async () => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}`);\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error in getUsers:', error);\r\n    throw new Error(`Failed to fetch users: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Get a user by ID\r\nexport const getUserById = async (id) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${id}`);\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(`Error in getUserById for user ID ${id}:`, error);\r\n    throw new Error(`Failed to fetch user with ID ${id}: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Update a user by ID\r\nexport const updateUser = async (id, updatedUser) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updatedUser),\r\n    });\r\n\r\n    // Handle empty responses (204 No Content)\r\n    if (response.status === 204) return null;\r\n\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(`Error in updateUser for user ID ${id}:`, error);\r\n    throw new Error(`Failed to update user with ID ${id}: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Delete a user by ID\r\nexport const deleteUser = async (id) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    if (response.status === 204) {\r\n      return null; // No content to return\r\n    }\r\n\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(`Error in deleteUser for user ID ${id}:`, error);\r\n    throw new Error(`Failed to delete user with ID ${id}: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Get a user by username\r\nexport const getUserByUsername = async (username) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/username/${username}`);\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(`Error in getUserByUsername for username ${username}:`, error);\r\n    throw new Error(`Failed to fetch user with username ${username}: ${error.message}`);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}